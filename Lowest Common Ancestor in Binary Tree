/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void util(TreeNode *root,TreeNode *p,stack<int> &s,int &flag){
        if(root==p){
            flag=1;
            s.push(root->val);
            return;
        }
        else{
            s.push(root->val);
        }
        if(root->left && flag==0){
            util(root->left,p,s,flag);
        }
          if(root->right && flag==0){
            while(s.top()!=root->val){
                s.pop();
            }
            util(root->right,p,s,flag);
        }
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        stack<int> s1,s2;
        int flag=0;
        util(root,p,s1,flag);
        flag=0;
        util(root,q,s2,flag);
        while(!s1.empty() && !s2.empty()){
            if(s1.top()==s2.top()){
                break;
            }
            else if(s1.size() >s2.size()){
            s1.pop();
            }
            else{
                s2.pop();
            }
        }
        TreeNode *temp=new TreeNode(s1.top());
        return temp;
    }
};
