class Solution {
public:
    int mod = 1e9+7;
    int util(int m, int n, int move, int i, int j, int c, vector<vector<vector<long long int>>> &dp){
        if(i < 0 || j < 0 || i == m || j == n){
         //   c++;
            return 1;
        }
        else if(move == 0){
            return 0;
        }
        if(dp[i][j][move] != -1)return dp[i][j][move]%mod;
        long long int l = 0, r = 0, u = 0, d= 0;
        if(move != 0){
            l = util(m, n, move-1, i-1, j, c, dp);
        }
        if(move != 0){
            r = util(m, n, move-1, i, j-1, c, dp);
        }
        if(move != 0){
            u = util(m, n, move-1, i, j+1, c, dp);
        }
        if(move != 0){
            d = util(m, n, move-1, i+1, j, c, dp);
        }
        return dp[i][j][move] = (l + r + d + u)%mod;
    }
    int findPaths(int m, int n, int move, int sr, int sc) {
        int c = 0;
        vector<vector<vector<long long int>>> dp(m+1, vector<vector<long long int>>(n+1, vector<long long int>(move+1, -1)));
        return util(m, n, move, sr, sc, c, dp);
        //return c;
    }
};
