/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int util(TreeNode* root){
        if(!root)return 0;
        return max(util(root->left),util(root->right))+1;
    }
    void leaves(TreeNode *root,int h,int &ans,int l){
        if(root){
            if(h==l){
                ans+=root->val;
            }
            leaves(root->left,h,ans,l+1);
            leaves(root->right,h,ans,l+1);
        }
    }
    int deepestLeavesSum(TreeNode* root) {
        if (!root->left && !root->right)return root->val;
        int h=util(root);
        int ans=0;
        leaves(root,h,ans,1);
        return ans;
    }
};
