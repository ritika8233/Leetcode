class Solution {
public:
    void util(int ind, int n, vector<int> &arr, int t, vector<int> &temp, set<vector<int>> &s){
        if(t == 0){
            s.insert(temp);
            /*if(temp.size() > 0){
                for(int i = 0; i < temp.size(); i++){
                    cout<<temp[i]<<" ";
                }
                cout<<endl;
            }*/
        }
        if(ind >= n || t < 0)return;
        if(arr[ind] <= t){
            temp.push_back(arr[ind]);
            util(ind, n, arr, t-arr[ind], temp, s);
            temp.pop_back();
        }
        util(ind+1, n, arr, t, temp, s);
    }
    vector<vector<int>> combinationSum(vector<int>& arr, int t) {
        vector<vector<int>> ans;
        int n = arr.size();
        vector<int> temp;
        set<vector<int>> s;
        util(0, n, arr, t, temp, s);
        for(auto itr = s.begin(); itr != s.end(); itr++){
           vector<int> v; 
            for(auto i : *itr){
                v.push_back(i);
            }
            ans.push_back(v);
        }
        return ans;
    }
};
