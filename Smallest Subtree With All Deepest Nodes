/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int left_util(TreeNode *root){
        if(!root){
            return 0;
        }
        return max(left_util(root->left),left_util(root->right))+1;
    }
    int right_util(TreeNode *root){
        if(!root){
            return 0;
        }
        return max(right_util(root->left),right_util(root->right))+1;
    }

    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(!root ){
            return NULL;
        }
       int l=left_util(root->left);
        int r=right_util(root->right);
       // cout<<l<<" "<<r;
        if(l>r){
          return subtreeWithAllDeepest(root->left);
        }
        else if(r>l){
            return subtreeWithAllDeepest(root->right);
        }else
        return root;
    }
};
