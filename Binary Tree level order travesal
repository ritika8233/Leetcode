/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode *root){
        if(!root) return 0;
        if(root && !root->left && !root->right) return 1;
        return max(height(root->left),height(root->right))+1;
    }
    void util(multimap<int,int> &m,int h,TreeNode *root,int l){
        if(root){
            if(h==l){
            m.insert(make_pair(h,root->val));
            }
            util(m,h,root->left,l+1);
            util(m,h,root->right,l+1);
        }
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
      int h=height(root);
        multimap<int,int> m;
        vector<vector<int>> v(h);
        for(int i=0;i<=h;i++){
            util(m,i,root,0);
        }
        for(auto itr=m.begin();itr!=m.end();itr++){
            v[itr->first].push_back(itr->second);
        }
        return v;
    }
};
