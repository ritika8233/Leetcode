class Solution {
public:
    int util(vector<int> &arr, int t, int i, int n, vector<vector<int>> &dp){
        if(t == 0){
            return 1;
        }
        if(i >= n)return 0;
        if(dp[i][t] != -1)return dp[i][t];
        int a = 0;
        if(arr[i] <= t)
        a = util(arr, t - arr[i], i+1, n, dp);
        int b = util(arr, t, i+1, n, dp);
        return dp[i][t] = max(a, b);
    }
    bool canPartition(vector<int>& arr) {
        int n = arr.size();
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += arr[i];
        }
        if(sum % 2 != 0)return false;
        sum = sum/2;
        vector<vector<int>> dp(n+1, vector<int>(sum+1, -1));
        int flag = util(arr, sum, 0, n, dp);
        if(flag == 1)return true;
        return false;
    }
};
