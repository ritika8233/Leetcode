/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void util(ListNode* head,stack<int> &s){
        while(head){
            s.push(head->val);
            head=head->next;
        }
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1 ) return l2;
        if(!l2 ) return l1;
        stack<int> s1,s2,s3;
        util(l1,s1);
        util(l2,s2);
        ListNode *dummy=new ListNode();
        ListNode *temp=dummy;
        int carry=0;
        while(!s1.empty() && !s2.empty()){
            int sum=0;
            sum+=s1.top();
            s1.pop();
            sum+=s2.top();
            s2.pop();
            sum+=carry;
            s3.push(sum%10);
            carry=sum/10;
        }
        while(!s1.empty()){
            int sum=0;
            sum+=s1.top();
            sum+=carry;
            carry=sum/10;
            s3.push(sum%10);
            s1.pop();
        }
        while(!s2.empty()){
            int sum=0;
            sum+=s2.top();
            sum+=carry;
            carry=sum/10;
            s3.push(sum%10);
            s2.pop();
        }

        if(carry!=0){
            s3.push(carry);
        }
        while(!s3.empty()){
            ListNode *node=new ListNode(s3.top());
            s3.pop();
            temp->next=node;
            temp=temp->next;
        }
        return dummy->next;
    }
};
