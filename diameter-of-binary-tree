/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int util(TreeNode* root){
        if(!root )return 0;
        return max(util(root->left),util(root->right))+1;
    }
    void util2(TreeNode* root,int &ans){
       if(!root||(!root->left && !root->right)) return;
       int h1=util(root->left);
       int h2=util(root->right);
        ans=max(ans,(h1+h2));
        util2(root->left,ans);
        util2(root->right,ans);
    }
    int diameterOfBinaryTree(TreeNode* root) {
       if(!root||(!root->left && !root->right)) return 0;
        int ans=0;
        util2(root,ans);
        return ans;
    }
};
